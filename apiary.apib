FORMAT: 1A

HOST: http://127.0.0.1:5000/api/v2


# Book_A_Meal API
Book_A_Meal is an application that allows customers to make food orders and helps the food vendor know what the customers want to eat.
This is the api docs for the app.

# Group Authenitication

Resources related to User Registration and Login.

## SignUp Collection [POST /auth/register]
+ Request
    + Headers

            Content-Type: application/json
    
    + Attributes
        - username: username (string, required)- Username
        - email: emai@mail.com (string , required) - User email
        - password: password (string, required) - User password
        - is_admin: true (string, required) - User type

+ Response 201 (application/json)
    + Attributes
        - token: <token> string - The token


## Login Collection [POST /auth/login]

+ Request
    
    + Headers

            Content-Type: application/json
    
    + Attributes
        - email: email@email.com (string, required)- User email
        - password: password (string, required) - user password

+ Response 201 (application/json)
    + Attributes
        - token: <token> string - The token


# Group Meals

Resources related to the meals in the API.

## Meals Collection [/meals]

### List All Meals [GET]

+ Request
    + Headers

            Content-Type: application/json
            Authorization: Bearer <TOKEN>

+ Response 200 (application/json)

### Create a New Meal [POST]

+ Request
    + Headers

            Content-Type: application/json
            Authorization: Bearer <TOKEN>

    + Attributes
        + meals (array)
            + (object)
                - meal_name: Brunch (string, required) - Meal name

+ Response 201 (application/json)
    + Attributes
        - status: 201 (number) - The response status

    

### Meal [GET /meals/{id}]
Get a meal by id
+ Request
    + Headers

            Content-Type: application/json
            Authorization: Bearer <TOKEN>

+ Parameter
    + id: `1` - The ID of the meal

+ Response 200 (application/json)

### Edit a Meal [PUT /meals/{id}]

+ Request
    + Headers

            Content-Type: application/json
            Authorization: Bearer <TOKEN>

    + Attributes
        - meal_name: `Lunch` (string)
+ Parameter
    + id: `1` - The ID of the meal
    
+ Response 200 (application/json)

### Delete a Meal [DELETE /meals/{id}]

+ Request
    + Headers

            Content-Type: application/json
            Authorization: Bearer <TOKEN>

+ Parameter
    + id: `1` - The ID of the meal

+ Response 200 (application/json)

# Group Menus

Resources related to the menus in the API.

## Menus Collection [/menus]

### List All Menus [GET]

+ Request
    + Headers

            Content-Type: application/json
            Authorization: Bearer <TOKEN>

+ Response 200 (application/json)

### Create a New Menu [POST]

+ Request
    + Headers

            Content-Type: application/json
            Authorization: Bearer <TOKEN>

    + Attributes
        + menus (array)
            + (object)
                - meal_item: Pancake (string, required) - Meal name
                - meal_id: 1 (number, required) - Meal id

+ Response 201 (application/json)
    + Attributes
        - status: 201 (number) - The response status

    

### Menu [GET /menus/{id}]
Get a menu item by id
+ Request
    + Headers

            Content-Type: application/json
            Authorization: Bearer <TOKEN>

+ Parameter
    + id: `1` - The ID of the meal

+ Response 200 (application/json)

### Edit a Menu [PUT /menus/{id}]

+ Request
    + Headers

            Content-Type: application/json
            Authorization: Bearer <TOKEN>

    + Attributes
        - meal_item: `pancake1` (string)
        - meal_id: 1 (number)
+ Parameter
    + id: `1` - The ID of the meal
    
+ Response 200 (application/json)

### Delete a Menu [DELETE /menus/{id}]

+ Request
    + Headers

            Content-Type: application/json
            Authorization: Bearer <TOKEN>

+ Parameter
    + id: `1` - The ID of the meal
+ Response 200 (application/json)    

# Group Orders

Resources related to the orders in the API.

## Orders Collection [/orders]

### List All Orders [GET]

+ Request
    + Headers

            Content-Type: application/json
            Authorization: Bearer <TOKEN>

+ Response 200 (application/json)

### Create a New Order [POST]

+ Request
    + Headers

            Content-Type: application/json
            Authorization: Bearer <TOKEN>

    + Attributes
        + menus (array)
            + (object)
                - item_id: 1 (number, required) - Meal_item id
                - quantity: 1 (number, required) - quantity

+ Response 201 (application/json)
    + Attributes
        - status: 201 (number) - The response status

    

### Menu [GET /orders/{id}]
Get a menu item by id
+ Request
    + Headers

            Content-Type: application/json
            Authorization: Bearer <TOKEN>

+ Parameter
    + id: `1` - The ID of the meal

+ Response 200 (application/json)

### Edit a Orders [PUT /orders/{id}]

+ Request
    + Headers

            Content-Type: application/json
            Authorization: Bearer <TOKEN>

    + Attributes
        - item_id: 1 (number, required)
        - quantity: 3 (number, required)
+ Parameter
    + id: `1` - The ID of the meal
    
+ Response 200 (application/json)

### Delete a Orders [DELETE /orders/{id}]

+ Request
    + Headers

            Content-Type: application/json
            Authorization: Bearer <TOKEN>

+ Parameter
    + id: `1` - The ID of the meal

+ Response 200 (application/json)